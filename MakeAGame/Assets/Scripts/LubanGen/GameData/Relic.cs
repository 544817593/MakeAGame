//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace cfg.GameData
{ 

public sealed partial class Relic :  Bright.Config.BeanBase 
{
    public Relic(JSONNode _json) 
    {
        { if(!_json["relicID"].IsNumber) { throw new SerializationException(); }  RelicID = _json["relicID"]; }
        { if(!_json["relicName"].IsString) { throw new SerializationException(); }  RelicName = _json["relicName"]; }
        { if(!_json["desc"].IsString) { throw new SerializationException(); }  Desc = _json["desc"]; }
        { if(!_json["effectDesc"].IsString) { throw new SerializationException(); }  EffectDesc = _json["effectDesc"]; }
        { if(!_json["rarity"].IsNumber) { throw new SerializationException(); }  Rarity = (GameData.Rarity)_json["rarity"].AsInt; }
        { var __json0 = _json["ToCancelRelics"]; if(!__json0.IsArray) { throw new SerializationException(); } ToCancelRelics = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  ToCancelRelics.Add(__v0); }   }
        { var __json0 = _json["BeCanceledRelics"]; if(!__json0.IsArray) { throw new SerializationException(); } BeCanceledRelics = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  BeCanceledRelics.Add(__v0); }   }
        { if(!_json["effectPriority"].IsNumber) { throw new SerializationException(); }  EffectPriority = _json["effectPriority"]; }
        PostInit();
    }

    public Relic(int relicID, string relicName, string desc, string effectDesc, GameData.Rarity rarity, System.Collections.Generic.List<int> ToCancelRelics, System.Collections.Generic.List<int> BeCanceledRelics, int effectPriority ) 
    {
        this.RelicID = relicID;
        this.RelicName = relicName;
        this.Desc = desc;
        this.EffectDesc = effectDesc;
        this.Rarity = rarity;
        this.ToCancelRelics = ToCancelRelics;
        this.BeCanceledRelics = BeCanceledRelics;
        this.EffectPriority = effectPriority;
        PostInit();
    }

    public static Relic DeserializeRelic(JSONNode _json)
    {
        return new GameData.Relic(_json);
    }

    /// <summary>
    /// 遗物id
    /// </summary>
    public int RelicID { get; private set; }
    /// <summary>
    /// 遗物名字
    /// </summary>
    public string RelicName { get; private set; }
    /// <summary>
    /// 设定描述
    /// </summary>
    public string Desc { get; private set; }
    /// <summary>
    /// 效果描述
    /// </summary>
    public string EffectDesc { get; private set; }
    /// <summary>
    /// 品质
    /// </summary>
    public GameData.Rarity Rarity { get; private set; }
    /// <summary>
    /// 本遗物会取消哪些遗物的效果
    /// </summary>
    public System.Collections.Generic.List<int> ToCancelRelics { get; private set; }
    public System.Collections.Generic.List<GameData.Relic> ToCancelRelics_Ref { get; private set; }
    /// <summary>
    /// 本遗物会被哪些遗物取消效果
    /// </summary>
    public System.Collections.Generic.List<int> BeCanceledRelics { get; private set; }
    public System.Collections.Generic.List<GameData.Relic> BeCanceledRelics_Ref { get; private set; }
    /// <summary>
    /// 与其他遗物同时作用于同一数值时，两者的先后顺序
    /// </summary>
    public int EffectPriority { get; private set; }

    public const int __ID__ = -1964165695;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        { GameData.TbRelic __table = (GameData.TbRelic)_tables["GameData.TbRelic"]; this.ToCancelRelics_Ref = new System.Collections.Generic.List<GameData.Relic>(); foreach(var __e in ToCancelRelics) { this.ToCancelRelics_Ref.Add(__table.GetOrDefault(__e)); } }
        { GameData.TbRelic __table = (GameData.TbRelic)_tables["GameData.TbRelic"]; this.BeCanceledRelics_Ref = new System.Collections.Generic.List<GameData.Relic>(); foreach(var __e in BeCanceledRelics) { this.BeCanceledRelics_Ref.Add(__table.GetOrDefault(__e)); } }
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "RelicID:" + RelicID + ","
        + "RelicName:" + RelicName + ","
        + "Desc:" + Desc + ","
        + "EffectDesc:" + EffectDesc + ","
        + "Rarity:" + Rarity + ","
        + "ToCancelRelics:" + Bright.Common.StringUtil.CollectionToString(ToCancelRelics) + ","
        + "BeCanceledRelics:" + Bright.Common.StringUtil.CollectionToString(BeCanceledRelics) + ","
        + "EffectPriority:" + EffectPriority + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}
